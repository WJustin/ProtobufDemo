// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SignMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "SignMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PTMSignMessageRoot

@implementation PTMSignMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PTMSignMessageRoot_FileDescriptor

static GPBFileDescriptor *PTMSignMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                 objcPrefix:@"PTM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PTMUserSignUpRequest

@implementation PTMUserSignUpRequest

@dynamic deviceId;
@dynamic brand;
@dynamic platform;
@dynamic osVersion;
@dynamic sdkVersion;

typedef struct PTMUserSignUpRequest__storage_ {
  uint32_t _has_storage_[1];
  PTMUserSignUpRequest_Platform platform;
  NSString *deviceId;
  NSString *brand;
  NSString *osVersion;
  NSString *sdkVersion;
} PTMUserSignUpRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = PTMUserSignUpRequest_FieldNumber_DeviceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PTMUserSignUpRequest__storage_, deviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "brand",
        .dataTypeSpecific.className = NULL,
        .number = PTMUserSignUpRequest_FieldNumber_Brand,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PTMUserSignUpRequest__storage_, brand),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = PTMUserSignUpRequest_Platform_EnumDescriptor,
        .number = PTMUserSignUpRequest_FieldNumber_Platform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PTMUserSignUpRequest__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "osVersion",
        .dataTypeSpecific.className = NULL,
        .number = PTMUserSignUpRequest_FieldNumber_OsVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PTMUserSignUpRequest__storage_, osVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sdkVersion",
        .dataTypeSpecific.className = NULL,
        .number = PTMUserSignUpRequest_FieldNumber_SdkVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PTMUserSignUpRequest__storage_, sdkVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PTMUserSignUpRequest class]
                                     rootClass:[PTMSignMessageRoot class]
                                          file:PTMSignMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PTMUserSignUpRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PTMUserSignUpRequest_Platform_RawValue(PTMUserSignUpRequest *message) {
  GPBDescriptor *descriptor = [PTMUserSignUpRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PTMUserSignUpRequest_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetPTMUserSignUpRequest_Platform_RawValue(PTMUserSignUpRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [PTMUserSignUpRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PTMUserSignUpRequest_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PTMUserSignUpRequest_Platform

GPBEnumDescriptor *PTMUserSignUpRequest_Platform_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Android\000Ios\000";
    static const int32_t values[] = {
        PTMUserSignUpRequest_Platform_Android,
        PTMUserSignUpRequest_Platform_Ios,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PTMUserSignUpRequest_Platform)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PTMUserSignUpRequest_Platform_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PTMUserSignUpRequest_Platform_IsValidValue(int32_t value__) {
  switch (value__) {
    case PTMUserSignUpRequest_Platform_Android:
    case PTMUserSignUpRequest_Platform_Ios:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PTMUserSignUpResponse

@implementation PTMUserSignUpResponse

@dynamic token;

typedef struct PTMUserSignUpResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} PTMUserSignUpResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = PTMUserSignUpResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PTMUserSignUpResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PTMUserSignUpResponse class]
                                     rootClass:[PTMSignMessageRoot class]
                                          file:PTMSignMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PTMUserSignUpResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
